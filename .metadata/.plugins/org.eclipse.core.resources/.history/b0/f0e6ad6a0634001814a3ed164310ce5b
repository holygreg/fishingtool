package persist.dao.impl;

import java.util.List;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.boot.registry.StandardServiceRegistryBuilder;
import org.hibernate.cfg.Configuration;

import persist.dao.interfaces.DaoInterface;

/**
 * Abstract DAO-class implementing basic functionality shared by all DAOs. It
 * implements the DaoInterface.
 * 
 * @author gregor
 *
 * @param <T>
 *            The type of the respective Entity
 */
public abstract class AbstractDaoImpl<T,K> implements DaoInterface<T,K> {

	private Session currentSession;

	private Transaction currentTransaction;

	/**
	 * Opens a hibernate-session and returns its instance.
	 * 
	 * @return the opened hibernate-session
	 */
	public Session openCurrentSession() {
		currentSession = getSessionFactory().openSession();
		return currentSession;
	}

	/**
	 * Opens a hibernate-session, begins a transaction and returns the opened
	 * session.
	 * 
	 * @return the opened hibernate-session
	 */
	public Session openCurrentSessionwithTransaction() {
		currentSession = getSessionFactory().openSession();
		currentTransaction = currentSession.beginTransaction();
		return currentSession;
	}

	/**
	 * Closes the current session.
	 */
	public void closeCurrentSession() {
		currentSession.close();
	}

	/**
	 * Closes the current transaction-session.
	 */
	public void closeCurrentSessionwithTransaction() {
		currentTransaction.commit();
		currentSession.close();
	}

	/**
	 * Creates a SessionFactory using the specified configuration.
	 * 
	 * @return the created SessionFactory
	 */
	private static SessionFactory getSessionFactory() {
		return new Configuration().configure().buildSessionFactory();
	}

	public Session getCurrentSession() {
		return currentSession;
	}

	public void setCurrentSession(Session currentSession) {
		this.currentSession = currentSession;
	}

	public Transaction getCurrentTransaction() {
		return currentTransaction;
	}

	public void setCurrentTransaction(Transaction currentTransaction) {
		this.currentTransaction = currentTransaction;
	}

	@Override
	public void saveOrUpdate(T entity) {
		openCurrentSessionwithTransaction();
		getCurrentSession().saveOrUpdate(entity);
		closeCurrentSessionwithTransaction();
	}

	@Override
	public void delete(T entity) {
		openCurrentSessionwithTransaction();
		getCurrentSession().delete(entity);
		closeCurrentSessionwithTransaction();
	}

	@Override
	public abstract List<T> findAll();

	@Override
	public void deleteAll() {
		openCurrentSessionwithTransaction();
		List<T> entityList = findAll();
		for (T entity : entityList) {
			getCurrentSession().delete(entity);
		}
		closeCurrentSessionwithTransaction();
	}

}
